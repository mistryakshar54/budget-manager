{"ast":null,"code":"import store from '../store';\nexport const fetchPaymentData = paymentData => {\n  return {\n    type: 'FETCH_PAYMENT_METHOD',\n    payload: paymentData\n  };\n};\nexport const successPaymentAction = () => {\n  return {\n    type: 'SUCCESS_PAYMENT_METHOD'\n  };\n};\nexport const errorPaymentAction = errorPayload => {\n  return {\n    type: 'ERROR_PAYMENT_METHOD',\n    payload: errorPayload\n  };\n};\nexport const inRequestPaymentAction = () => {\n  return {\n    type: 'IN_PROCESS_PAYMENT_METHOD'\n  };\n};\nexport const addPaymentMethod = paymentMethod => {\n  return {\n    type: 'ADD_PAYMENT_METHOD',\n    payload: paymentMethod\n  };\n};\nexport const requestNewPaymentMethod = paymentMethod => {\n  return dispatch => {\n    dispatch(inRequestPaymentAction());\n    dispatch(addPaymentMethod(paymentMethod));\n    dispatch(successPaymentAction());\n  };\n};\nexport const fetchPaymentModeDetail = paymentMode => {\n  return {\n    type: 'FETCH_PAYMENT_MODE_DETAIL',\n    payload: paymentMode\n  };\n};\nexport const fetchPaymentModeDetailAC = paymentModeId => {\n  return (dispatch, getState) => {\n    debugger;\n    let matchIndex = -1;\n    let paymentModeState = Object.assign({}, getState().PaymentReducer);\n    paymentModeState.paymentModeArr.forEach((item, index) => {\n      if (item.id === paymentModeId) {\n        matchIndex = index;\n      }\n    });\n\n    if (matchIndex > -1) {\n      dispatch(fetchPaymentModeDetail(pay));\n    }\n\n    console.log(getState().PaymentReducer);\n  };\n};\nexport const loadPaymentData = paymentModeId => {\n  return dispatch => {\n    dispatch(inRequestPaymentAction());\n    dispatch(fetchPaymentModeDetailAC(paymentModeId));\n  };\n};","map":{"version":3,"sources":["/Users/akshar.mistry/Desktop/Workspace/budget-manager/front-end/src/store/actions/PaymentActionCreators.js"],"names":["store","fetchPaymentData","paymentData","type","payload","successPaymentAction","errorPaymentAction","errorPayload","inRequestPaymentAction","addPaymentMethod","paymentMethod","requestNewPaymentMethod","dispatch","fetchPaymentModeDetail","paymentMode","fetchPaymentModeDetailAC","paymentModeId","getState","matchIndex","paymentModeState","Object","assign","PaymentReducer","paymentModeArr","forEach","item","index","id","pay","console","log","loadPaymentData"],"mappings":"AACA,OAAOA,KAAP,MAAkB,UAAlB;AAEA,OAAO,MAAMC,gBAAgB,GAAKC,WAAF,IAAmB;AAC/C,SAAO;AACHC,IAAAA,IAAI,EAAG,sBADJ;AAEHC,IAAAA,OAAO,EAAGF;AAFP,GAAP;AAIH,CALM;AAOP,OAAO,MAAMG,oBAAoB,GAAG,MAAM;AACtC,SAAO;AACHF,IAAAA,IAAI,EAAG;AADJ,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMG,kBAAkB,GAAKC,YAAF,IAAmB;AACjD,SAAO;AACHJ,IAAAA,IAAI,EAAG,sBADJ;AAEHC,IAAAA,OAAO,EAAGG;AAFP,GAAP;AAIH,CALM;AAOP,OAAO,MAAMC,sBAAsB,GAAG,MAAM;AACxC,SAAO;AACHL,IAAAA,IAAI,EAAG;AADJ,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMM,gBAAgB,GAAKC,aAAF,IAAqB;AACjD,SAAM;AACFP,IAAAA,IAAI,EAAG,oBADL;AAEFC,IAAAA,OAAO,EAAGM;AAFR,GAAN;AAIH,CALM;AAOP,OAAO,MAAMC,uBAAuB,GAAKD,aAAF,IAAqB;AACxD,SAAOE,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAAEJ,sBAAsB,EAAxB,CAAR;AACAI,IAAAA,QAAQ,CAAEH,gBAAgB,CAAEC,aAAF,CAAlB,CAAR;AACAE,IAAAA,QAAQ,CAAEP,oBAAoB,EAAtB,CAAR;AACH,GAJD;AAMH,CAPM;AASP,OAAO,MAAMQ,sBAAsB,GAAIC,WAAD,IAAiB;AACnD,SAAO;AACHX,IAAAA,IAAI,EAAG,2BADJ;AAEHC,IAAAA,OAAO,EAAGU;AAFP,GAAP;AAIH,CALM;AAMP,OAAO,MAAMC,wBAAwB,GAAKC,aAAF,IAAqB;AACzD,SAAO,CAACJ,QAAD,EAAUK,QAAV,KAAuB;AAC1B;AACA,QAAIC,UAAU,GAAG,CAAC,CAAlB;AACA,QAAIC,gBAAgB,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAmBJ,QAAQ,GAAGK,cAA9B,CAAvB;AACAH,IAAAA,gBAAgB,CAACI,cAAjB,CAAgCC,OAAhC,CAAyC,CAACC,IAAD,EAAQC,KAAR,KAAkB;AACvD,UAAGD,IAAI,CAACE,EAAL,KAAYX,aAAf,EACA;AACIE,QAAAA,UAAU,GAAGQ,KAAb;AACH;AACJ,KALD;;AAMA,QAAGR,UAAU,GAAG,CAAC,CAAjB,EACA;AACIN,MAAAA,QAAQ,CAACC,sBAAsB,CAAEe,GAAF,CAAvB,CAAR;AACH;;AACDC,IAAAA,OAAO,CAACC,GAAR,CAAYb,QAAQ,GAAGK,cAAvB;AACH,GAfD;AAgBH,CAjBM;AAmBP,OAAO,MAAMS,eAAe,GAAKf,aAAF,IAAqB;AAChD,SAAOJ,QAAQ,IAAI;AACXA,IAAAA,QAAQ,CAAEJ,sBAAsB,EAAxB,CAAR;AACAI,IAAAA,QAAQ,CAAEG,wBAAwB,CAAEC,aAAF,CAA1B,CAAR;AACP,GAHD;AAIH,CALM","sourcesContent":["\nimport store from '../store';\n\nexport const fetchPaymentData = ( paymentData ) => {\n    return {\n        type : 'FETCH_PAYMENT_METHOD',\n        payload : paymentData\n    }\n}\n\nexport const successPaymentAction = () => {\n    return {\n        type : 'SUCCESS_PAYMENT_METHOD'\n    }\n}\n\nexport const errorPaymentAction = ( errorPayload) => {\n    return {\n        type : 'ERROR_PAYMENT_METHOD',\n        payload : errorPayload\n    }\n}\n\nexport const inRequestPaymentAction = () => {\n    return {\n        type : 'IN_PROCESS_PAYMENT_METHOD'\n    }\n}\n\nexport const addPaymentMethod = ( paymentMethod ) => {\n    return{\n        type : 'ADD_PAYMENT_METHOD',\n        payload : paymentMethod \n    }\n}\n\nexport const requestNewPaymentMethod = ( paymentMethod ) => {\n    return dispatch => {\n        dispatch( inRequestPaymentAction() );\n        dispatch( addPaymentMethod( paymentMethod ) );\n        dispatch( successPaymentAction() );\n    }\n\n}\n\nexport const fetchPaymentModeDetail = (paymentMode) => {\n    return {\n        type : 'FETCH_PAYMENT_MODE_DETAIL',\n        payload : paymentMode\n    }\n}\nexport const fetchPaymentModeDetailAC = ( paymentModeId ) => {\n    return (dispatch,getState) => {\n        debugger;\n        let matchIndex = -1;\n        let paymentModeState = Object.assign({} , getState().PaymentReducer);\n        paymentModeState.paymentModeArr.forEach( (item , index) => {\n            if(item.id === paymentModeId)\n            {\n                matchIndex = index;\n            }\n        });\n        if(matchIndex > -1)\n        {\n            dispatch(fetchPaymentModeDetail( pay ));\n        }\n        console.log(getState().PaymentReducer            );\n    }\n}\n\nexport const loadPaymentData = ( paymentModeId ) => {\n    return dispatch => {\n            dispatch( inRequestPaymentAction() );\n            dispatch( fetchPaymentModeDetailAC( paymentModeId ) );\n    }\n}"]},"metadata":{},"sourceType":"module"}